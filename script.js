// Globale Variablen
let currentAnalysis = null;
let analysisHistory = [];

// E-Mail-Vorlage
const emailTemplate = `
  <p>Kennen Sie das?</p>
  <p>‚ÄûIch h√§tte gern eine ESG-Tischplatte als Ersatz ‚Äì ca. 160 √ó 90 cm, 8 mm stark, Kanten geschliffen. K√∂nnen Sie mir daf√ºr ein Angebot machen?"</p>
  <p>Eigentlich eine kleine Anfrage ‚Äì aber sie kostet jedes Mal Zeit: Ma√üe notieren, Kunden anlegen, Preise raussuchen, Angebot schreiben, PDF erstellen, verschicken ‚Ä¶</p>
  <p>Und w√§hrenddessen warten gr√∂√üere Projekte ‚Äì Duschabtrennungen, Schaufenster, Aufma√ütermine.</p>
  <p>Genau daf√ºr habe ich ‚Äì gemeinsam mit einem Glasermeister ‚Äì einen Konfigurator entwickelt, den Sie einfach auf Ihrer Website anbieten k√∂nnen.</p>
  <p>Damit k√∂nnen Anfragen direkt digital erfasst und in Sekunden als Angebot per Mail versendet werden ‚Äì ohne Systemwechsel, ohne Papier, ohne Verz√∂gerung.</p>
  <ul>
    <li>Ma√üe, Glasart & St√§rke eingeben</li>
    <li>Automatisch berechnetes PDF-Angebot per Mail</li>
    <li>Kopie geht direkt an Sie</li>
    <li>Auch intern nutzbar ‚Äì z. B. am Telefon oder Tresen</li>
    <li>Lieferzuschl√§ge, Monteurstunden, Rabatte mit drin (bei interner Nutzung)</li>
  </ul>
  <p><strong>Vorteile f√ºr Sie:</strong></p>
  <ul>
    <li>Ihre eigenen Preise, keine externen Systeme</li>
    <li>Keine lange Schulung ‚Äì der Konfigurator ist selbsterkl√§rend und sofort einsatzbereit</li>
    <li>Einsetzbar auf Website, im B√ºro oder unterwegs am Handy</li>
  </ul>
  <p>üëâ <strong>Direkt ausprobieren:</strong><br>
  <a href="https://spiegel.lejaa.de" target="_blank">https://spiegel.lejaa.de</a><br>
  (Einfach Ma√üe eingeben ‚Äì das fertige PDF kommt sofort)</p>
  <p>W√§re das auch was f√ºr Ihren Betrieb?</p>
  <p>Ich zeige Ihnen das Ganze gern in 10 Minuten ‚Äì pers√∂nlich, ohne Verpflichtung.</p>
  <p>üìû 030 54 70 24 10<br>
  üìß <a href="mailto:office@lejaa.de">office@lejaa.de</a></p>
  <p>Glasklare Gr√º√üe</p>
  <p><strong>Atakan Olcaysu</strong><br>
  Inhaber<br>
  <strong>LEJAA MARKETINGAGENTUR</strong><br>
  Sch√∂nhauser Allee 163<br>
  10435 Berlin<br>
  <a href="mailto:office@lejaa.de">office@lejaa.de</a><br>
  <a href="https://lejaa.de" target="_blank">https://lejaa.de</a></p>
  <hr>
  <p style="font-size: 0.9em; color: #777;">
  Diese Nachricht wurde im Rahmen einer einmaligen, pers√∂nlich adressierten Kontaktaufnahme versendet. Ihre Kontaktdaten stammen aus einer √∂ffentlich zug√§nglichen Quelle und wurden ausschlie√ülich f√ºr dieses individuell erstellte Angebot verwendet.<br>
  Sie m√ºssen nichts weiter tun ‚Äì es erfolgt <strong>keine weitere Kontaktaufnahme</strong>, wenn Sie nicht reagieren.
  </p>
`;

// Historie aus localStorage laden
function loadHistoryFromStorage() {
  try {
    const savedHistory = localStorage.getItem('glasereiAnalysisHistory');
    if (savedHistory) {
      analysisHistory = JSON.parse(savedHistory);
    }
  } catch (error) {
    console.error('Fehler beim Laden der Historie:', error);
    analysisHistory = [];
  }
}

// Historie in localStorage speichern
function saveHistoryToStorage() {
  try {
    localStorage.setItem('glasereiAnalysisHistory', JSON.stringify(analysisHistory));
  } catch (error) {
    console.error('Fehler beim Speichern der Historie:', error);
  }
}

// Hauptfunktion f√ºr die Datenanalyse
async function analyseGlasereiDaten() {
  const apiKey = document.getElementById('openaiApiKey').value.trim();
  const impressumText = document.getElementById('impressumText').value.trim();
  const kundeninfoText = document.getElementById('kundeninfoText').value.trim();
  const output = document.getElementById('output');
  const mailSection = document.getElementById('mail-generator-section');

  if (!apiKey) {
    output.innerHTML = '<p style="color: red;">Bitte geben Sie Ihren OpenAI API Key ein.</p>';
    return;
  }

  if (!impressumText && !kundeninfoText) {
    output.innerHTML = '<p style="color: red;">Bitte geben Sie mindestens Impressum oder Kundeninformationen ein.</p>';
    return;
  }

  output.innerHTML = '<p>üîç Analysiere Daten...</p>';

  try {
    // Erste API-Anfrage f√ºr Datenanalyse
    const analysisResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: "Du bist ein Experte f√ºr die Analyse von Glaserei-Daten. Antworte nur mit g√ºltigem JSON."
          },
          {
            role: "user",
            content: `Analysiere die folgenden Glaserei-Daten und extrahiere strukturierte Informationen:

${impressumText ? `IMPRESSUM:\n${impressumText}\n\n` : ''}
${kundeninfoText ? `KUNDENINFORMATIONEN:\n${kundeninfoText}\n\n` : ''}

Extrahiere folgende Informationen im JSON-Format:
{
  "firmenname": "Name der Firma",
  "anschrift": {
    "strasse": "Stra√üe und Hausnummer",
    "plz": "Postleitzahl",
    "ort": "Ort"
  },
  "kontakt": {
    "telefon": "Telefonnummer",
    "email": "E-Mail-Adresse",
    "website": "Website (falls vorhanden)"
  },
  "inhaber": "Name des Inhabers/Gesch√§ftsf√ºhrers",
  "gruendungsjahr": "Gr√ºndungsjahr (falls angegeben)",
  "leistungen": ["Liste der angebotenen Leistungen"],
  "oeffnungszeiten": "√ñffnungszeiten (falls angegeben)",
  "besonderheiten": ["Besondere Merkmale oder Spezialisierungen"]
}

Antworte nur mit dem JSON-Objekt, ohne zus√§tzlichen Text.`
          }
        ],
        temperature: 0.1
      })
    });

    if (!analysisResponse.ok) {
      throw new Error(`HTTP error! status: ${analysisResponse.status}`);
    }

    const analysisData = await analysisResponse.json();
    const parsedResponse = JSON.parse(analysisData.choices[0].message.content);
    
    // F√ºge den urspr√ºnglichen Text hinzu
    parsedResponse.ueberUnsText = kundeninfoText || impressumText;
    
    // Zweite API-Anfrage f√ºr Einleitungsvarianten
    const einleitungResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          {
            role: "user",
            content: `Du bist ein Unternehmer, der einen Online-Konfigurator f√ºr Glas-Anfragen entwickelt hat. Du schreibst an eine Glaserei.

WICHTIGE DATEN DER GLASEREI:
- Firmenname: ${parsedResponse.firmenname || 'unbekannt'}
- Inhaber: ${parsedResponse.inhaber || 'unbekannt'}
- Standort: ${parsedResponse.anschrift?.ort || 'unbekannt'}

Lies dir den folgenden Text der Glaserei aufmerksam durch.

Schreibe **drei kurze, professionelle Einleitungsabschnitte** f√ºr eine E-Mail an diese Glaserei. Du willst ihnen deinen Konfigurator vorstellen.

WICHTIG: 
- Du bist der Anbieter, die Glaserei ist der potenzielle Kunde
- BEGINNE NICHT mit einer Anrede - die wird separat hinzugef√ºgt
- Verwende den KORREKTEN Firmennamen und Inhaber-Namen
- Schreibe KURZ und PR√ÑGNANT (max. 3-4 S√§tze pro Variante)
- KEINE redundanten Namenswiederholungen
- Professioneller, direkter Ton
- Fokus auf das Problem (Zeitaufwand bei kleinen Anfragen) und die L√∂sung
- JEDE Variante muss einen √úBERGANG zu deiner L√∂sung enthalten
- Ende jede Variante mit einem Satz, der zu deiner L√∂sung √ºberleitet

VARIANTE 1: Spezifische Merkmale aufgreifen
VARIANTE 2: Regionale/√∂rtliche Verbindung  
VARIANTE 3: Leistungsfokus

Beispiel f√ºr professionelle Einleitungen MIT √úBERGANG:
- "Als erfahrener Glasermeister wissen Sie, dass kleine Anfragen oft viel Zeit kosten. Mit Ihrem Wachstum steigen auch die Herausforderungen bei der Anfragenbearbeitung. Als jemand, der sich auf digitale L√∂sungen spezialisiert hat, habe ich ein Tool entwickelt, das genau dieses Problem l√∂st."
- "In Ihrer Region sind Sie bekannt f√ºr Qualit√§t und Service. Doch auch bei Ihnen k√∂nnen kleine Anfragen den Arbeitsalltag verlangsamen. Genau deshalb habe ich einen Konfigurator entwickelt, der Ihnen dabei helfen kann."
- "Mit zunehmender Kundenzahl wird die effiziente Bearbeitung von Anfragen zur Herausforderung. Besonders bei kleineren Auftr√§gen geht oft wertvolle Zeit verloren. Als Entwickler digitaler Werkzeuge habe ich eine L√∂sung erstellt, die diesen Prozess optimiert."

TEXT DER GLASEREI:
${impressumText}

${kundeninfoText}

Antworte NUR mit den 3 Einleitungsvarianten, ohne weitere Erkl√§rungen.`
          }
        ],
        temperature: 0.5
      })
    });

    if (!einleitungResponse.ok) {
      throw new Error(`HTTP error! status: ${einleitungResponse.status}`);
    }

    const einleitungData = await einleitungResponse.json();
    const einleitungsText = einleitungData.choices[0].message.content.trim();
    
    // Parse die 3 Varianten
    const varianten = parseEinleitungsVarianten(einleitungsText);
    
    // F√ºge die 3 Varianten zu den Daten hinzu
    parsedResponse.einleitungsVarianten = varianten;
    parsedResponse.personalisierteEinleitung = varianten.variante1; // Standard: erste Variante
    
    // E-Mail-Text im Ausgabebereich anzeigen
    document.getElementById('mail-output').innerText = varianten.variante1;
    
    currentAnalysis = parsedResponse;
    
    // Anzeige der analysierten Daten
    displayAnalysis(parsedResponse);
    
    // E-Mail-Generator anzeigen
    showMailGenerator();
    
    // Zur Historie hinzuf√ºgen
    addToHistory(parsedResponse);

  } catch (error) {
    console.error('Fehler bei der Analyse:', error);
    output.innerHTML = `<p style="color: red;">Fehler bei der Analyse: ${error.message}</p>`;
  }
}

// Funktion zum Parsen der Einleitungsvarianten
function parseEinleitungsVarianten(einleitungsText) {
  const varianten = {
    variante1: '',
    variante2: '',
    variante3: ''
  };
  
  // Teile den Text in Abschnitte auf
  const sections = einleitungsText.split(/(?:VARIANTE \d+:)/);
  
  if (sections.length >= 4) {
    // Entferne leere Eintr√§ge und trimme
    const cleanSections = sections.filter(section => section.trim()).map(section => section.trim());
    
    if (cleanSections.length >= 3) {
      varianten.variante1 = cleanSections[0];
      varianten.variante2 = cleanSections[1];
      varianten.variante3 = cleanSections[2];
    }
  } else {
    // Fallback: Versuche es mit Zeilen-basiertem Parsing
    const lines = einleitungsText.split('\n');
    let currentVariante = '';
    let currentText = '';
    
    for (const line of lines) {
      const trimmedLine = line.trim();
      
      if (trimmedLine.startsWith('VARIANTE 1:') || trimmedLine.includes('VARIANTE 1')) {
        if (currentVariante && currentText) {
          varianten[currentVariante] = currentText.trim();
        }
        currentVariante = 'variante1';
        currentText = trimmedLine.replace(/VARIANTE 1:?\s*/, '').trim();
      } else if (trimmedLine.startsWith('VARIANTE 2:') || trimmedLine.includes('VARIANTE 2')) {
        if (currentVariante && currentText) {
          varianten[currentVariante] = currentText.trim();
        }
        currentVariante = 'variante2';
        currentText = trimmedLine.replace(/VARIANTE 2:?\s*/, '').trim();
      } else if (trimmedLine.startsWith('VARIANTE 3:') || trimmedLine.includes('VARIANTE 3')) {
        if (currentVariante && currentText) {
          varianten[currentVariante] = currentText.trim();
        }
        currentVariante = 'variante3';
        currentText = trimmedLine.replace(/VARIANTE 3:?\s*/, '').trim();
      } else if (currentVariante && trimmedLine) {
        currentText += ' ' + trimmedLine;
      }
    }
    
    // Letzte Variante speichern
    if (currentVariante && currentText) {
      varianten[currentVariante] = currentText.trim();
    }
  }
  
  // Fallback: Wenn keine Varianten gefunden wurden, erstelle Standard-Varianten
  if (!varianten.variante1 && !varianten.variante2 && !varianten.variante3) {
    varianten.variante1 = `Als erfahrener Glasermeister wissen Sie, dass kleine Anfragen oft viel Zeit kosten. Mit Ihrem Wachstum steigen auch die Herausforderungen bei der Anfragenbearbeitung. Als jemand, der sich auf digitale L√∂sungen spezialisiert hat, habe ich ein Tool entwickelt, das genau dieses Problem l√∂st.`;
    varianten.variante2 = `In Ihrer Region sind Sie bekannt f√ºr Qualit√§t und Service. Doch auch bei Ihnen k√∂nnen kleine Anfragen den Arbeitsalltag verlangsamen. Genau deshalb habe ich einen Konfigurator entwickelt, der Ihnen dabei helfen kann.`;
    varianten.variante3 = `Mit zunehmender Kundenzahl wird die effiziente Bearbeitung von Anfragen zur Herausforderung. Besonders bei kleineren Auftr√§gen geht oft wertvolle Zeit verloren. Als Entwickler digitaler Werkzeuge habe ich eine L√∂sung erstellt, die diesen Prozess optimiert.`;
  }
  
  return varianten;
}

// Anzeige der analysierten Daten
function displayAnalysis(data) {
  const output = document.getElementById('output');
  
  let html = '<h3>üìä Analysierte Daten:</h3>';
  html += '<div style="background: #f8f9fa; padding: 1rem; border-radius: 6px; margin: 1rem 0;">';
  
  if (data.firmenname) {
    html += `<p><strong>Firmenname:</strong> ${data.firmenname}</p>`;
  }
  
  if (data.anschrift) {
    html += `<p><strong>Adresse:</strong> ${data.anschrift.strasse || ''}, ${data.anschrift.plz || ''} ${data.anschrift.ort || ''}</p>`;
  }
  
  if (data.kontakt) {
    if (data.kontakt.telefon) html += `<p><strong>Telefon:</strong> ${data.kontakt.telefon}</p>`;
    if (data.kontakt.email) html += `<p><strong>E-Mail:</strong> ${data.kontakt.email}</p>`;
    if (data.kontakt.website) html += `<p><strong>Website:</strong> ${data.kontakt.website}</p>`;
  }
  
  if (data.inhaber) {
    html += `<p><strong>Inhaber:</strong> ${data.inhaber}</p>`;
  }
  
  if (data.gruendungsjahr) {
    html += `<p><strong>Gr√ºndungsjahr:</strong> ${data.gruendungsjahr}</p>`;
  }
  
  if (data.leistungen && data.leistungen.length > 0) {
    html += `<p><strong>Leistungen:</strong> ${data.leistungen.join(', ')}</p>`;
  }
  
  if (data.oeffnungszeiten) {
    html += `<p><strong>√ñffnungszeiten:</strong> ${data.oeffnungszeiten}</p>`;
  }
  
  if (data.besonderheiten && data.besonderheiten.length > 0) {
    html += `<p><strong>Besonderheiten:</strong> ${data.besonderheiten.join(', ')}</p>`;
  }
  
  html += '</div>';
  
  // Einleitungsvarianten anzeigen
  if (data.einleitungsVarianten) {
    html += '<h3>üìù Einleitungsvarianten:</h3>';
    html += '<div style="background: #f8f9fa; padding: 1rem; border-radius: 6px; margin: 1rem 0;">';
    
    html += '<div style="margin-bottom: 1rem;">';
    html += '<label style="display: block; margin-bottom: 0.5rem;"><strong>W√§hlen Sie eine Einleitung:</strong></label>';
    
    // Radio-Buttons f√ºr alle 3 Varianten
    html += '<div style="margin-bottom: 1rem;">';
    html += '<label style="display: block; margin-bottom: 0.5rem;">';
    html += '<input type="radio" name="einleitung" value="variante1" checked style="margin-right: 0.5rem;">';
    html += '<strong>Variante 1:</strong> Spezifische Merkmale aufgreifen';
    html += '</label>';
    html += '<div style="background: white; padding: 0.75rem; border: 1px solid #ddd; border-radius: 4px; margin: 0.5rem 0 1rem 1.5rem; font-style: italic; color: #666;">';
    html += `${data.einleitungsVarianten.variante1}`;
    html += '</div>';
    
    html += '<label style="display: block; margin-bottom: 0.5rem;">';
    html += '<input type="radio" name="einleitung" value="variante2" style="margin-right: 0.5rem;">';
    html += '<strong>Variante 2:</strong> Regionale/√∂rtliche Verbindung';
    html += '</label>';
    html += '<div style="background: white; padding: 0.75rem; border: 1px solid #ddd; border-radius: 4px; margin: 0.5rem 0 1rem 1.5rem; font-style: italic; color: #666;">';
    html += `${data.einleitungsVarianten.variante2}`;
    html += '</div>';
    
    html += '<label style="display: block; margin-bottom: 0.5rem;">';
    html += '<input type="radio" name="einleitung" value="variante3" style="margin-right: 0.5rem;">';
    html += '<strong>Variante 3:</strong> Leistungsfokus';
    html += '</label>';
    html += '<div style="background: white; padding: 0.75rem; border: 1px solid #ddd; border-radius: 4px; margin: 0.5rem 0 1rem 1.5rem; font-style: italic; color: #666;">';
    html += `${data.einleitungsVarianten.variante3}`;
    html += '</div>';
    html += '</div>';
    
    // Anrede-Auswahl unter den Einleitungsvarianten
    html += '<hr style="margin: 2rem 0; border: 1px solid #ddd;">';
    html += '<div style="margin-bottom: 1rem;">';
    html += '<label style="display: block; margin-bottom: 0.5rem;"><strong>üë§ Anrede ausw√§hlen:</strong></label>';

    const inhaber = data.inhaber || '';
    const firmenname = data.firmenname || '';
    
    if (inhaber) {
      const nameParts = inhaber.split(' ');
      const nachname = nameParts[nameParts.length - 1];
      
      html += `
        <label style="display: block; margin-bottom: 0.5rem;">
          <input type="radio" name="anrede" value="herr" checked style="margin-right: 0.5rem;">
          <strong>Sehr geehrter Herr ${nachname}</strong>
        </label>
        <label style="display: block; margin-bottom: 0.5rem;">
          <input type="radio" name="anrede" value="frau" style="margin-right: 0.5rem;">
          <strong>Sehr geehrte Frau ${nachname}</strong>
        </label>
        <label style="display: block; margin-bottom: 0.5rem;">
          <input type="radio" name="anrede" value="firma" style="margin-right: 0.5rem;">
          <strong>Sehr geehrte Damen und Herren der ${firmenname}</strong>
        </label>
      `;
    } else {
      html += `
        <label style="display: block; margin-bottom: 0.5rem;">
          <input type="radio" name="anrede" value="firma" checked style="margin-right: 0.5rem;">
          <strong>Sehr geehrte Damen und Herren der ${firmenname}</strong>
        </label>
        <label style="display: block; margin-bottom: 0.5rem;">
          <input type="radio" name="anrede" value="allgemein" style="margin-right: 0.5rem;">
          <strong>Sehr geehrte Damen und Herren</strong>
        </label>
      `;
    }
    html += '</div>';
    html += '</div>';
  }
  
  output.innerHTML = html;
}

// E-Mail-Generierung
async function generateMailWithSelectedEinleitung() {
  const selectedEinleitungRadio = document.querySelector('input[name="einleitung"]:checked');
  
  if (!selectedEinleitungRadio) {
    alert('Bitte w√§hlen Sie eine Einleitungsvariante aus.');
    return;
  }

  if (!currentAnalysis) {
    alert('Bitte f√ºhren Sie zuerst eine Analyse durch.');
    return;
  }

  const selectedVariante = selectedEinleitungRadio.value;
  const einleitungText = currentAnalysis.einleitungsVarianten[selectedVariante];
  
  // Aktualisiere die ausgew√§hlte Einleitung
  currentAnalysis.personalisierteEinleitung = einleitungText;
  
  // E-Mail generieren
  const mailOutput = document.getElementById('mail-output');
  mailOutput.innerHTML = '<p>üîÑ Generiere E-Mail...</p>';

  // Anrede von den Radio-Buttons holen
  const anrede = getSelectedAnrede();
  
  const selectedVarianteKey = selectedEinleitungRadio.value;
  const roheEinleitung = currentAnalysis.einleitungsVarianten[selectedVarianteKey];

  // Die Einleitung enth√§lt jetzt keine Anrede mehr, daher keine Bereinigung n√∂tig
  const einleitungTextFinal = roheEinleitung.trim();
  
  // Ersten Buchstaben der Einleitung klein machen
  const einleitungTextKlein = einleitungTextFinal.charAt(0).toLowerCase() + einleitungTextFinal.slice(1);
    
  console.log('üîç Debug - Einleitung:', einleitungTextKlein);

  const email = currentAnalysis.kontakt?.email || 'beispiel@email.de';
  const subject = `Anfrage zur Optimierung Ihrer Kundenanfragen ‚Äì Konfigurator f√ºr ${currentAnalysis.firmenname}`;
  
  // E-Mail-Inhalt aus dynamischen Teilen und der Vorlage zusammensetzen
  const emailContent = `
    <style>
      body {
        line-height: 1.4;
        font-family: Arial, sans-serif;
        font-size: 15px;
      }
      p {
        margin: 0 0 10px 0;
      }
      ul {
        margin: 10px 0;
        padding-left: 20px;
      }
      li {
        margin-bottom: 5px;
      }
    </style>
    <p>${anrede},</p>
    <p>${einleitungTextKlein}</p>
    ${emailTemplate}
  `;

  mailOutput.innerHTML = emailContent.trim();

  // Buttons f√ºr die weitere Verarbeitung anzeigen
  document.getElementById('previewMailBtn').style.display = 'inline-block';
  document.getElementById('copyMailBtn').style.display = 'inline-block';
  document.getElementById('sendMailBtn').style.display = 'inline-block';
  
  // E-Mail-Daten f√ºr Vorschau speichern
  window.previewEmailData = {
    to: email,
    subject: subject,
    content: emailContent
  };

  alert(`‚úÖ Einleitung "${selectedVariante}" √ºbernommen und E-Mail generiert!`);
  
  // E-Mail-Status in der Historie aktualisieren
  if (analysisHistory.length > 0) {
    // Den neuesten Eintrag (ersten in der Liste) als generiert markieren
    analysisHistory[0].emailGenerated = true;
    // In localStorage speichern
    saveHistoryToStorage();
    updateHistoryDisplay();
  }
}

// Funktion zum Abrufen der ausgew√§hlten Anrede
function getSelectedAnrede() {
  const selectedRadio = document.querySelector('input[name="anrede"]:checked');
  if (!selectedRadio) {
    return 'Sehr geehrte Damen und Herren';
  }

  const inhaber = currentAnalysis.inhaber || '';
  const firmenname = currentAnalysis.firmenname || '';
  let anrede = 'Sehr geehrte Damen und Herren';
  
  if (inhaber) {
    const nameParts = inhaber.split(' ');
    const nachname = nameParts[nameParts.length - 1];
    
    switch(selectedRadio.value) {
      case 'herr':
        anrede = `Sehr geehrter Herr ${nachname}`;
        break;
      case 'frau':
        anrede = `Sehr geehrte Frau ${nachname}`;
        break;
      case 'firma':
        anrede = `Sehr geehrte Damen und Herren der ${firmenname}`;
        break;
    }
  } else {
    switch(selectedRadio.value) {
      case 'firma':
        anrede = `Sehr geehrte Damen und Herren der ${firmenname}`;
        break;
      case 'allgemein':
        anrede = 'Sehr geehrte Damen und Herren';
        break;
    }
  }
  return anrede;
}

// E-Mail-Generator anzeigen
function showMailGenerator() {
  const mailSection = document.getElementById('mail-generator-section');
  const changeAnredeBtn = document.getElementById('changeAnredeBtn');
  const previewBtn = document.getElementById('previewMailBtn');
  const copyBtn = document.getElementById('copyMailBtn');
  const sendBtn = document.getElementById('sendMailBtn');
  const configTestBtn = document.getElementById('configTestBtn');
  
  mailSection.style.display = 'block';
  changeAnredeBtn.style.display = 'none'; // Button ausblenden
  previewBtn.style.display = 'inline-block';
  copyBtn.style.display = 'inline-block';
  sendBtn.style.display = 'inline-block';
  configTestBtn.style.display = 'inline-block';
}

// E-Mail-Vorschau anzeigen
function showPreview() {
  if (!window.previewEmailData) {
    alert('Bitte generieren Sie zuerst eine E-Mail.');
    return;
  }

  const modal = document.getElementById('previewModal');
  const previewTo = document.getElementById('preview-to');
  const previewSubject = document.getElementById('preview-subject');
  const previewContent = document.getElementById('preview-content');

  previewTo.textContent = window.previewEmailData.to;
  previewSubject.textContent = window.previewEmailData.subject;
  previewContent.innerHTML = window.previewEmailData.content.replace(/\n/g, '<br>');

  modal.style.display = 'block';
}

// Vorschau-Modal schlie√üen
function closePreviewModal() {
  const modal = document.getElementById('previewModal');
  modal.style.display = 'none';
}

// E-Mail in Zwischenablage kopieren
function copyToClipboard() {
  const mailOutput = document.getElementById('mail-output');
  
  if (mailOutput.textContent.trim() === '') {
    alert('Keine E-Mail zum Kopieren verf√ºgbar.');
    return;
  }

  navigator.clipboard.writeText(mailOutput.textContent).then(() => {
    alert('E-Mail wurde in die Zwischenablage kopiert!');
  }).catch(err => {
    console.error('Fehler beim Kopieren:', err);
    alert('Fehler beim Kopieren in die Zwischenablage.');
  });
}

// E-Mail senden (EmailJS)
function sendEmail() {
  if (!window.previewEmailData) {
    alert('Bitte generieren Sie zuerst eine E-Mail.');
    return;
  }

  // Anrede und Einleitung korrekt holen
  const anrede = getSelectedAnrede();
  const selectedEinleitungRadio = document.querySelector('input[name="einleitung"]:checked');
  
  if (!selectedEinleitungRadio) {
    alert('Bitte w√§hlen Sie eine Einleitungsvariante aus.');
    return;
  }
  
  const selectedVarianteKey = selectedEinleitungRadio.value;
  const roheEinleitung = currentAnalysis.einleitungsVarianten[selectedVarianteKey];

  // Die Einleitung enth√§lt jetzt keine Anrede mehr, daher keine Bereinigung n√∂tig
  const einleitungText = roheEinleitung.trim();
  
  // Ersten Buchstaben der Einleitung klein machen
  const einleitungTextKlein = einleitungText.charAt(0).toLowerCase() + einleitungText.slice(1);

  // Erstelle die E-Mail-Nachricht mit nur Anrede und Einleitung
  const message = `${anrede}\n\n${einleitungTextKlein}`;

  // EmailJS-Konfiguration laden
  if (!window.EMAILJS_CONFIG) {
    alert('EmailJS-Konfiguration nicht gefunden. Bitte laden Sie die Seite neu.');
    return;
  }

  const { serviceID, templateID, publicKey } = window.EMAILJS_CONFIG;

  console.log('üìß Sende E-Mail mit folgender Konfiguration:', {
    serviceID,
    templateID,
    subject: 'Kleine Glas-Anfragen schnell abwickeln ‚Äì Wie ein Mini-Onlineshop',
    message: message.substring(0, 100) + '...'
  });

  // E-Mail senden
  emailjs.send(serviceID, templateID, {
    subject: 'Kleine Glas-Anfragen schnell abwickeln ‚Äì Wie ein Mini-Onlineshop',
    message: message
  }, publicKey)
  .then(function(response) {
    console.log('E-Mail erfolgreich gesendet:', response);
    alert('E-Mail wurde erfolgreich gesendet!');
  })
  .catch(function(error) {
    console.error('Fehler beim Senden der E-Mail:', error);
    alert('Fehler beim Senden der E-Mail: ' + (error.text || error.message || 'Unbekannter Fehler'));
  });
}

// Von Vorschau senden
function sendFromPreview() {
  sendEmail();
  closePreviewModal();
}

// EmailJS-Konfiguration testen
function testEmailJSConfig() {
  const mailOutput = document.getElementById('mail-output');
  mailOutput.textContent = 'üîß Teste EmailJS-Konfiguration...\n\n';
  
  // Hier k√∂nnen Sie Ihre EmailJS-Konfiguration testen
  mailOutput.textContent += 'EmailJS ist initialisiert mit ID: ia3YBTzlRJq2D9Bgx\n';
  mailOutput.textContent += 'Bitte konfigurieren Sie Ihre Service-ID und Template-ID in der sendEmail-Funktion.';
}

// Zur Historie hinzuf√ºgen
function addToHistory(data) {
  const historyEntry = {
    timestamp: new Date().toLocaleString('de-DE'),
    firmenname: data.firmenname || 'Unbekannt',
    email: data.kontakt?.email || 'Keine E-Mail',
    telefon: data.kontakt?.telefon || 'Keine Telefonnummer',
    emailGenerated: false // Wird auf true gesetzt, wenn E-Mail generiert wird
  };
  
  analysisHistory.unshift(historyEntry);
  
  // Nur die letzten 20 Eintr√§ge behalten (erh√∂ht f√ºr bessere √úbersicht)
  if (analysisHistory.length > 20) {
    analysisHistory = analysisHistory.slice(0, 20);
  }
  
  // In localStorage speichern
  saveHistoryToStorage();
  
  updateHistoryDisplay();
}

// Historie-Anzeige aktualisieren
function updateHistoryDisplay() {
  const historyOutput = document.getElementById('history-output');
  
  if (analysisHistory.length === 0) {
    historyOutput.innerHTML = '<p>Bisher keine Eintr√§ge vorhanden.</p>';
    return;
  }
  
  let html = `
    <div class="history-container">
      <table class="history-table">
        <thead>
          <tr>
            <th>Datum/Zeit</th>
            <th>Firmenname</th>
            <th>E-Mail</th>
            <th>Telefon</th>
            <th style="text-align: center;">E-Mail Status</th>
          </tr>
        </thead>
        <tbody>
  `;
  
  analysisHistory.forEach((entry, index) => {
    const emailStatusClass = entry.emailGenerated ? 'email-status-generated' : 'email-status-pending';
    const emailStatusText = entry.emailGenerated ? '‚úì Generiert' : '‚è≥ Ausstehend';
    
    html += `
      <tr>
        <td style="font-family: monospace; font-size: 13px;">${entry.timestamp}</td>
        <td style="font-weight: 500;">${entry.firmenname}</td>
        <td>
          ${entry.email !== 'Keine E-Mail' ? `<a href="mailto:${entry.email}" style="color: #007bff; text-decoration: none;">${entry.email}</a>` : entry.email}
        </td>
        <td>
          ${entry.telefon !== 'Keine Telefonnummer' ? `<a href="tel:${entry.telefon}" style="color: #007bff; text-decoration: none;">${entry.telefon}</a>` : entry.telefon}
        </td>
        <td style="text-align: center;" class="${emailStatusClass}">${emailStatusText}</td>
      </tr>
    `;
  });
  
  html += `
        </tbody>
      </table>
    </div>
    <div class="history-info">
      Zeigt die letzten ${analysisHistory.length} Eintr√§ge (neueste zuerst)
    </div>
  `;
  
  historyOutput.innerHTML = html;
}

// Event-Listener f√ºr Buttons
document.addEventListener('DOMContentLoaded', function() {
  // Historie beim Laden aus localStorage laden
  loadHistoryFromStorage();
  
  // E-Mail-Generator Buttons
  const generateBtn = document.getElementById('generateMailBtn');
  const changeAnredeBtn = document.getElementById('changeAnredeBtn');
  const previewBtn = document.getElementById('previewMailBtn');
  const copyBtn = document.getElementById('copyMailBtn');
  const sendBtn = document.getElementById('sendMailBtn');
  const configTestBtn = document.getElementById('configTestBtn');
  
  if (generateBtn) generateBtn.addEventListener('click', generateMailWithSelectedEinleitung);
  if (changeAnredeBtn) changeAnredeBtn.addEventListener('click', changeAnrede);
  if (previewBtn) previewBtn.addEventListener('click', showPreview);
  if (copyBtn) copyBtn.addEventListener('click', copyToClipboard);
  if (sendBtn) sendBtn.addEventListener('click', sendEmail);
  if (configTestBtn) configTestBtn.addEventListener('click', testEmailJSConfig);
  
  // Historie beim Laden anzeigen
  updateHistoryDisplay();
});

// Funktion zum manuellen √Ñndern der Anrede (wird nicht mehr verwendet, kann entfernt werden)
function changeAnrede() {
  // Diese Funktion ist veraltet
  alert("Die Anrede kann jetzt direkt √ºber die Radio-Buttons ge√§ndert werden.");
} 